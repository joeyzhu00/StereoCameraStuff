// Generated by gencpp from file interface/Cluster_bound_list.msg
// DO NOT EDIT!


#ifndef INTERFACE_MESSAGE_CLUSTER_BOUND_LIST_H
#define INTERFACE_MESSAGE_CLUSTER_BOUND_LIST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <interface/Cluster_bound.h>

namespace interface
{
template <class ContainerAllocator>
struct Cluster_bound_list_
{
  typedef Cluster_bound_list_<ContainerAllocator> Type;

  Cluster_bound_list_()
    : header()
    , cluster_bounds()
    , num_clusters(0)  {
    }
  Cluster_bound_list_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cluster_bounds(_alloc)
    , num_clusters(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::interface::Cluster_bound_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::interface::Cluster_bound_<ContainerAllocator> >::other >  _cluster_bounds_type;
  _cluster_bounds_type cluster_bounds;

   typedef int64_t _num_clusters_type;
  _num_clusters_type num_clusters;





  typedef boost::shared_ptr< ::interface::Cluster_bound_list_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interface::Cluster_bound_list_<ContainerAllocator> const> ConstPtr;

}; // struct Cluster_bound_list_

typedef ::interface::Cluster_bound_list_<std::allocator<void> > Cluster_bound_list;

typedef boost::shared_ptr< ::interface::Cluster_bound_list > Cluster_bound_listPtr;
typedef boost::shared_ptr< ::interface::Cluster_bound_list const> Cluster_bound_listConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interface::Cluster_bound_list_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interface::Cluster_bound_list_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'interface': ['/home/joey/Documents/StereoCameraStuff/src/modules/interface/msg'], 'diagnostic_msgs': ['/opt/ros/kinetic/share/diagnostic_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::interface::Cluster_bound_list_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interface::Cluster_bound_list_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface::Cluster_bound_list_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interface::Cluster_bound_list_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface::Cluster_bound_list_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interface::Cluster_bound_list_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interface::Cluster_bound_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3713a3df0748c501c3bdcf9ca17013e9";
  }

  static const char* value(const ::interface::Cluster_bound_list_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3713a3df0748c501ULL;
  static const uint64_t static_value2 = 0xc3bdcf9ca17013e9ULL;
};

template<class ContainerAllocator>
struct DataType< ::interface::Cluster_bound_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interface/Cluster_bound_list";
  }

  static const char* value(const ::interface::Cluster_bound_list_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interface::Cluster_bound_list_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
# cluster centroids and bounds in the current frame\n\
Cluster_bound[] cluster_bounds\n\
\n\
# number of clusters in the current frame\n\
int64 num_clusters\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: interface/Cluster_bound\n\
Header header\n\
\n\
# contains the centroid location of each cluster and bounds\n\
\n\
# centroid location\n\
geometry_msgs/Point32 centroid_location\n\
\n\
# cluster min bounds (x_min, y_min, z_min)\n\
geometry_msgs/Point32 min_bound\n\
\n\
# cluster max bounds (x_max, y_max, z_max)\n\
geometry_msgs/Point32 max_bound\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::interface::Cluster_bound_list_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interface::Cluster_bound_list_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cluster_bounds);
      stream.next(m.num_clusters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cluster_bound_list_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interface::Cluster_bound_list_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interface::Cluster_bound_list_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cluster_bounds[]" << std::endl;
    for (size_t i = 0; i < v.cluster_bounds.size(); ++i)
    {
      s << indent << "  cluster_bounds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::interface::Cluster_bound_<ContainerAllocator> >::stream(s, indent + "    ", v.cluster_bounds[i]);
    }
    s << indent << "num_clusters: ";
    Printer<int64_t>::stream(s, indent + "  ", v.num_clusters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERFACE_MESSAGE_CLUSTER_BOUND_LIST_H
